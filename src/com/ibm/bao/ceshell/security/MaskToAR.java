package com.ibm.bao.ceshell.security;

import com.filenet.api.constants.AccessRight;

public class MaskToAR {	
	
	public static final AccessRight[] AllRights = new AccessRight[] {
		AccessRight.NONE,						//	0			00000000000000000000000000000
		AccessRight.READ,						//	1			00000000000000000000000000001
		AccessRight.WRITE,						//	2			00000000000000000000000000010
		AccessRight.MAJOR_VERSION,				//	4			00000000000000000000000000100
		AccessRight.LINK,						//	16			00000000000000000000000001000
		AccessRight.UNLINK,						//	32			00000000000000000000000010000
		AccessRight.MINOR_VERSION,				//	64			00000000000000000000000100000
		AccessRight.VIEW_CONTENT,				//	128			00000000000000000000001000000
		AccessRight.CREATE_INSTANCE,			//	256			00000000000000000000010000000
		AccessRight.CREATE_CHILD,				//	512			00000000000000000000100000000
		AccessRight.CHANGE_STATE,				//	1024		00000000000000000001000000000
		AccessRight.PUBLISH,					//	2048		00000000000000000010000000000
		AccessRight.RESERVED12,					//	4096		00000000000000000100000000000
		AccessRight.RESERVED13,					//	8192		00000000000000001000000000000
		// gap1,								//	16384		00000000000000010000000000000
		// gap2,								//	32768		00000000000000100000000000000
		AccessRight.DELETE,						//	65536		00000000000001000000000000000
		AccessRight.READ_ACL,					//	131072		00000000000010000000000000000
		AccessRight.WRITE_ACL,					//	262144		00000000000100000000000000000
		AccessRight.WRITE_OWNER,				//	524288		00000000001000000000000000000
		AccessRight.CONNECT,					//	1048576		00000000010000000000000000000
		AccessRight.STORE_OBJECTS,				//	2097152		00000000100000000000000000000
		AccessRight.MODIFY_OBJECTS,				//	4194304		00000001000000000000000000000
		AccessRight.REMOVE_OBJECTS,				//	8388608		00000010000000000000000000000
		AccessRight.WRITE_ANY_OWNER,			//	16777216	00000100000000000000000000000
		AccessRight.ADD_MARKING,				//	33554432	00001000000000000000000000000
		AccessRight.REMOVE_MARKING,				//	67108864	00010000000000000000000000000
		AccessRight.USE_MARKING,				//	134217728	00100000000000000000000000000
		AccessRight.PRIVILEGED_WRITE			//	268435456	01000000000000000000000000000
	};
	
	public static final int AllRightsAsInt[] = new int[] {
			//Constant							IntValue				BIN
			AccessRight.NONE_AS_INT,			//	0				00000000000000000000000000000
			AccessRight.READ_AS_INT,			//	1				00000000000000000000000000001
			AccessRight.WRITE_AS_INT,			//	2				00000000000000000000000000010
			AccessRight.MAJOR_VERSION_AS_INT,	//	4				00000000000000000000000000100
			AccessRight.LINK_AS_INT,			//	16				00000000000000000000000001000
			AccessRight.UNLINK_AS_INT,			//	32				00000000000000000000000010000
			AccessRight.MINOR_VERSION_AS_INT,	//	64				00000000000000000000000100000
			AccessRight.VIEW_CONTENT_AS_INT,	//	128				00000000000000000000001000000
			AccessRight.CREATE_INSTANCE_AS_INT,	//	256				00000000000000000000010000000
			AccessRight.CREATE_CHILD_AS_INT,	//	512				00000000000000000000100000000
			AccessRight.CHANGE_STATE_AS_INT,	//	1024			00000000000000000001000000000
			AccessRight.PUBLISH_AS_INT,			//	2048			00000000000000000010000000000
			AccessRight.RESERVED12_AS_INT,		//	4096			00000000000000000100000000000
			AccessRight.RESERVED13_AS_INT,		//	8192			00000000000000001000000000000
			// gap1,					  		    16384			00000000000000010000000000000
			// gap2,							//	32768			00000000000000100000000000000
			AccessRight.DELETE_AS_INT,			//	65536			00000000000001000000000000000
			AccessRight.READ_ACL_AS_INT,		//	131072			00000000000010000000000000000
			AccessRight.WRITE_ACL_AS_INT,		//	262144			00000000000100000000000000000
			AccessRight.WRITE_OWNER_AS_INT,		//	524288			00000000001000000000000000000
			AccessRight.CONNECT_AS_INT,			//	1048576			00000000010000000000000000000
			AccessRight.STORE_OBJECTS_AS_INT,	//	2097152			00000000100000000000000000000
			AccessRight.MODIFY_OBJECTS_AS_INT,	//	4194304			00000001000000000000000000000
			AccessRight.REMOVE_OBJECTS_AS_INT,	//	8388608			00000010000000000000000000000
			AccessRight.WRITE_ANY_OWNER_AS_INT,	//	16777216		00000100000000000000000000000
			AccessRight.ADD_MARKING_AS_INT,		//	33554432		00001000000000000000000000000
			AccessRight.REMOVE_MARKING_AS_INT,	//	67108864		00010000000000000000000000000
			AccessRight.USE_MARKING_AS_INT,		//	134217728		00100000000000000000000000000
			AccessRight.PRIVILEGED_WRITE_AS_INT	//	268435456		01000000000000000000000000000
	};
	
	public static final String[] AllRightsNames = new String[] {
		"NONE",									//	0			00000000000000000000000000000
		"READ",									//	1			00000000000000000000000000001
		"WRITE",								//	2			00000000000000000000000000010
		"MAJOR_VERSION",						//	4			00000000000000000000000000100
		"LINK",									//	16			00000000000000000000000001000
		"UNLINK",								//	32			00000000000000000000000010000
		"MINOR_VERSION",						//	64			00000000000000000000000100000
		"VIEW_CONTENT",							//	128			00000000000000000000001000000
		"CREATE_INSTANCE",						//	256			00000000000000000000010000000
		"CREATE_CHILD",							//	512			00000000000000000000100000000
		"CHANGE_STATE",							//	1024		00000000000000000001000000000
		"PUBLISH",								//	2048		00000000000000000010000000000
		"RESERVED12",							//	4096		00000000000000000100000000000
		"RESERVED13",							//	8192		00000000000000001000000000000
		// gap1									//	16384		00000000000000010000000000000
		// gap2									//	32768		00000000000000100000000000000
		"DELETE",								//	65536		00000000000001000000000000000
		"READ_ACL",								//	131072		00000000000010000000000000000
		"WRITE_ACL",							//	262144		00000000000100000000000000000
		"WRITE_OWNER",							//	524288		00000000001000000000000000000
		"CONNECT",								//	1048576		00000000010000000000000000000
		"STORE_OBJECTS",						//	2097152		00000000100000000000000000000
		"MODIFY_OBJECTS",						//	4194304		00000001000000000000000000000
		"REMOVE_OBJECTS",						//	8388608		00000010000000000000000000000
		"WRITE_ANY_OWNER",						//	16777216	00000100000000000000000000000
		"ADD_MARKING",							//	33554432	00001000000000000000000000000
		"REMOVE_MARKING",						//	67108864	00010000000000000000000000000
		"USE_MARKING",							//	134217728	00100000000000000000000000000
		"PRIVILEGED_WRITE"						//	268435456	01000000000000000000000000000
	};
	
	public static ARInfo[] ARs = new ARInfo[AllRights.length]; 
	static {
		boolean illegalState = false;
		
		if (AllRights.length != AllRightsNames.length) {
			System.err.println("AllRights is not the same as the names");
			illegalState = true;
		}
		if (AllRights.length != AllRightsAsInt.length) {
			System.err.println("AllRights is not the same length as the int list");
			illegalState = true;
		}
		
		if (! illegalState) {
			for (int i = 0; i < AllRights.length; i++) {
				ARs[i] = new ARInfo(AllRights[i],
							AllRightsNames[i]);
			}
		}
	}
	
	public String maskToAces(Integer mask) {
		StringBuffer buf = new StringBuffer();
		String result = null;
		for (int i = 0; i < ARs.length; i++) {
			ARInfo arInfo = ARs[i];
			String name = arInfo.getArName();
			buf.append(i).append("\t")
				.append(arInfo.isSet(mask)).append("\t")
				.append(name).append("\n");
		}
		result = buf.toString();
		return result;
	}
}



